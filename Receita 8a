import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

enum TableStatus { idle, loading, ready, error }
enum ItemType { beer, coffee, nation, none }

class DataService {
  final ValueNotifier<Map<String, dynamic>> tableStateNotifier = ValueNotifier({
    'status': TableStatus.idle,
    'dataObjects': [],
    'itemType': ItemType.none,
  });

  void carregar(int index) {
    final funcoes = [
      () => _carregarDados(ItemType.coffee, 'api/coffee/random_coffee', ["blend_name", "origin", "variety"], ["Nome", "Origem", "Tipo"]),
      () => _carregarDados(ItemType.beer, 'api/beer/random_beer', ["name", "style", "ibu"], ["Nome", "Estilo", "IBU"]),
      () => _carregarDados(ItemType.nation, 'api/nation/random_nation', ["nationality", "capital", "language", "national_sport"], ["Nome", "Capital", "Idioma", "Esporte"]),
    ];
    if (tableStateNotifier.value['status'] == TableStatus.loading) return;
    funcoes[index]();
  }

  void _carregarDados(ItemType itemType, String path, List<String> propertyNames, List<String> columnNames) {
    if (tableStateNotifier.value['status'] == TableStatus.loading) return;
    if (tableStateNotifier.value['itemType'] != itemType) {
      tableStateNotifier.value = {
        'status': TableStatus.loading,
        'dataObjects': [],
        'itemType': itemType,
      };
    }

    var uri = Uri(
      scheme: 'https',
      host: 'random-data-api.com',
      path: path,
      queryParameters: {'size': '10'},
    );

    http.read(uri).then((jsonString) {
      var jsonData = jsonDecode(jsonString);

      if (tableStateNotifier.value['status'] != TableStatus.loading) {
        jsonData = [...tableStateNotifier.value['dataObjects'], ...jsonData];
      }

      tableStateNotifier.value = {
        'itemType': itemType,
        'status': TableStatus.ready,
        'dataObjects': jsonData,
        'propertyNames': propertyNames,
        'columnNames': columnNames,
      };
    });
  }
}

final dataService = DataService();

void main() {
  MyApp app = MyApp();
  runApp(app);
}

class MyApp extends StatelessWidget {
  final functionsMap = {
    ItemType.beer: () => dataService.carregar(1),
    ItemType.coffee: () => dataService.carregar(0),
    ItemType.nation: () => dataService.carregar(2),
  };

  String _getItemCountText(int count) {
    return count == 1 ? "$count item" : "$count itens";
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(primarySwatch: Colors.deepPurple),
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        appBar: AppBar(
          title: ValueListenableBuilder(
            valueListenable: dataService.tableStateNotifier,
            builder: (_, value, __) {
              int itemCount = value['dataObjects'].length;
              return Text("Dicas (${_getItemCountText(itemCount)})");
            },
          ),
        ),
        body: ValueListenableBuilder(
          valueListenable: dataService.tableStateNotifier,
          builder: (_, value, __) {
            switch (value['status']) {
              case TableStatus.idle:
                return Center(child: Text("Toque algum botão, abaixo..."));
              case TableStatus.loading:
                return Center(child: CircularProgressIndicator());
              case TableStatus.ready:
                return ListWidget(
                  jsonObjects: value['dataObjects'],
                  propertyNames: value['propertyNames'],
                  scrollEndedCallback: functionsMap[value['itemType']],
                );
              case TableStatus.error:
                return Center(child: Text("Lascou"));
              default:
                return Center(child: Text("..."));
            }
          },
        ),
        bottomNavigationBar: NewNavBar(
          itemSelectedCallback: dataService.carregar,
        ),
      ),
    );
  }
}

class NewNavBar extends HookWidget {
  final void Function(int) _itemSelectedCallback;

  NewNavBar({required void Function(int) itemSelectedCallback})
      : _itemSelectedCallback = itemSelectedCallback;

  @override
  Widget build(BuildContext context) {
    var state = useState(1);

    return BottomNavigationBar(
      onTap: (index) {
        state.value = index;
        _itemSelectedCallback(index);
      },
      currentIndex: state.value,
      items: const [
        BottomNavigationBarItem(
          label: "Cafés",
          icon: Icon(Icons.coffee_outlined),
        ),
        BottomNavigationBarItem(
            label: "Cervejas", icon: Icon(Icons.local_drink_outlined)),
        BottomNavigationBarItem(
            label: "Nações", icon: Icon(Icons.flag_outlined)),
      ],
    );
  }
}

class ListWidget extends HookWidget {
  final void Function()? _scrollEndedCallback;
  final List jsonObjects;
  final List<String> propertyNames;

  ListWidget({
    this.jsonObjects = const [],
    this.propertyNames = const [],
    void Function()? scrollEndedCallback,
  }) : _scrollEndedCallback = scrollEndedCallback ?? (() {});

  @override
  Widget build(BuildContext context) {
    var controller = useScrollController();
    useEffect(() {
      controller.addListener(() {
        if (controller.position.pixels == controller.position.maxScrollExtent) {
          print('end reached');
          if (_scrollEndedCallback is Function) _scrollEndedCallback!();
        }
      });
    }, [controller]);

    return ListView.separated(
      controller: controller,
      padding: EdgeInsets.all(10),
      separatorBuilder: (_, __) => Divider(
        height: 5,
        thickness: 2,
        indent: 10,
        endIndent: 10,
        color: Theme.of(context).primaryColor,
      ),
      itemCount: jsonObjects.length + 1,
      itemBuilder: (_, index) {
        if (index == jsonObjects.length)
          return Center(child: LinearProgressIndicator());

        var title = jsonObjects[index][propertyNames[0]];
        var content = propertyNames
            .sublist(1)
            .map((prop) => jsonObjects[index][prop])
            .join(" - ");

        return Card(
          shadowColor: Theme.of(context).primaryColor,
          child: Column(
            children: [
              SizedBox(height: 10),
              //a primeira propriedade vai em negrito
              Text(
                "$title\n",
                style: TextStyle(fontWeight: FontWeight.bold),
              ),

              //as demais vão normais
              Text(content),
              SizedBox(height: 10)
            ],
          ),
        );
      },
    );
  }
}
